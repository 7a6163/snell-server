name: Build and Release Docker Images

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v5.0.0b3)'
        required: false
        default: 'latest'

permissions:
  packages: write
  contents: read

env:
  DOCKER_HUB_REGISTRY: docker.io
  GITHUB_REGISTRY: ghcr.io
  IMAGE_NAME: snell-server
  GHCR_NAMESPACE: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - platform: linux/amd64
            arch: amd64
          - platform: linux/arm64
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_HUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker Hub
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Extract metadata for GitHub Container Registry
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GITHUB_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push to Docker Hub by digest
        id: build-dockerhub
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: |
            SNELL_VERSION=v5.0.0
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
          outputs: type=image,name=${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to GitHub Container Registry by digest
        id: build-ghcr
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: |
            SNELL_VERSION=v5.0.0
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          outputs: type=image,name=${{ env.GITHUB_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export Docker Hub digest
        run: |
          mkdir -p /tmp/digests-dockerhub
          digest="${{ steps.build-dockerhub.outputs.digest }}"
          touch "/tmp/digests-dockerhub/${digest#sha256:}"

      - name: Export GitHub Container Registry digest
        run: |
          mkdir -p /tmp/digests-ghcr
          digest="${{ steps.build-ghcr.outputs.digest }}"
          touch "/tmp/digests-ghcr/${digest#sha256:}"

      - name: Upload Docker Hub digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-dockerhub-${{ matrix.arch }}
          path: /tmp/digests-dockerhub/*
          if-no-files-found: error
          retention-days: 1

      - name: Upload GitHub Container Registry digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-ghcr-${{ matrix.arch }}
          path: /tmp/digests-ghcr/*
          if-no-files-found: error
          retention-days: 1

  merge-dockerhub:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name != 'pull_request'
    steps:
      - name: Download Docker Hub digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-dockerhub-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_HUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker Hub
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect Docker Hub image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  merge-ghcr:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name != 'pull_request'
    steps:
      - name: Download GitHub Container Registry digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-ghcr-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for GitHub Container Registry
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GITHUB_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Create manifest list and push to GitHub Container Registry
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GITHUB_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect GitHub Container Registry image
        run: |
          docker buildx imagetools inspect ${{ env.GITHUB_REGISTRY }}/${{ env.GHCR_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  # Security scan disabled
  # security-scan:
  #   runs-on: ubuntu-latest
  #   needs: [merge-dockerhub]
  #   if: github.event_name != 'pull_request'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.DOCKER_HUB_REGISTRY }}
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #
  #     - name: Extract metadata for Docker Hub
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=raw,value=latest,enable={{is_default_branch}}
  #           type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
  #
  #     - name: Run Trivy vulnerability scanner on Docker Hub
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ env.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  # GitHub Release creation disabled
  # create-release:
  #   runs-on: ubuntu-latest
  #   needs: [merge-dockerhub]
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Extract tag name
  #       id: tag
  #       run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
  #
  #     - name: Create GitHub Release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ steps.tag.outputs.tag }}
  #         release_name: Release ${{ steps.tag.outputs.tag }}
  #         body: |
  #           ## Docker Images Released
  #
  #           Multi-architecture Docker images have been built and published to **Docker Hub**:
  #
  #           ### Docker Hub
  #           ```bash
  #           # Pull the latest release from Docker Hub
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
  #
  #           # Or pull the latest
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
  #           ```
  #
  #           ### Supported Architectures
  #           - `linux/amd64` (x86_64)
  #           - `linux/arm64` (aarch64)
  #
  #           ### Security
  #           - Distroless base image for minimal attack surface
  #           - Ultra-minimal footprint
  #           - Published to Docker Hub
  #
  #           ### Usage Examples
  #
  #           #### Using Docker Hub image:
  #           ```bash
  #           # Basic usage
  #           docker run -d --name snell-server -p 6160:6160 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
  #
  #           # With configuration
  #           docker run -d --name snell-server \
  #             -p 6160:6160 \
  #             -v ./snell-server.conf:/etc/snell-server.conf:ro \
  #             ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }} \
  #             snell-server -c /etc/snell-server.conf
  #           ```
  #
  #           See the [README](README.md) for complete documentation.
  #         draft: false
  #         prerelease: false
